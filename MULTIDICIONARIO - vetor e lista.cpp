#include <new>

using std::nothrow;



template <typename TC, typename TV> // TC: Tipo das Chaves. TV: Tipo dos Valores
struct Multidicionario
  {

   // --------------------------------------------------------------------------

   /* Como m√∫ltiplos valores, incluindo repeti√ß√µes, podem corresponder a uma
    * mesma chave num multidicion√°rio, voc√™ dever√° definir a seguir um tipo
    * Multiconjunto. */
    struct noh{
       	TV valor;noh *prox;
	};

   struct Multiconjunto
     {

      /* COMPLETE AQUI: defina aqui pelo menos os campos (dados-membro) do
       *                multiconjunto, podendo ser inclu√≠das outras defini√ß√µes,
       *                se necess√°rio. */

      // -----------------------------------------------------------------------

      /* O multiconjunto ter√° um iterador, que permitir√° percorrer os valores
       * correspondentes a uma chave. */
       TC chv_conj;noh *prim=nullptr;

      struct Iterador  // Relativo ao Multiconjunto, n√£o ao Multidicionario.
        {

         /* COMPLETE AQUI: defina aqui os campos (dados-membro) do iterador. */
			noh *p;
			
         bool operator == (Iterador i)
           {
            /* COMPLETE AQUI: Esta fun√ß√£o deve retornar "true" se o iterador
             *                atual for igual ao iterador "i", ou "false" em
             *                caso contr√°rio. */
             return p==i.p;
           }

         bool operator != (Iterador i)
           {
            /* COMPLETE AQUI: Esta fun√ß√£o deve retornar "true" se o iterador
             *                atual for diferente do iterador "i", ou "false" em
             *                caso contr√°rio. */
             return p!=i.p;
           }

         TV operator * ()
           {
            /* COMPLETE AQUI: Esta fun√ß√£o deve retornar o valor apontado pelo
             *                iterador. */
             return p->valor;
           }

         void operator ++ ()
           {
            /* COMPLETE AQUI: Esta fun√ß√£o deve fazer o iterador passar ao
             *                pr√≥ximo valor do multiconjunto (ou ent√£o ao fim
             *                do multiconjunto, caso o iterador j√° esteja no
             *                √∫ltimo valor). */
             p=p->prox;
           }

        };  // struct Iterador

      // -----------------------------------------------------------------------

      /* Defina as fun√ß√µes-membro mencionadas a seguir, que s√£o essenciais para
       * que se possa percorrer os valores do multiconjunto.
       *
       * IMPORTANTE: como o usu√°rio do multidicion√°rio utilizar√° o multiconjunto
       * apenas para conhecer os valores correspondentes a uma dada chave do
       * multidicion√°rio, ent√£o opera√ß√µes como "inicializar", "inserir" e
       * "remover" N√ÉO S√ÉO EXIGIDAS abaixo. Entretanto, voc√™ pode defini-las,
       * caso precise delas internamente, nas opera√ß√µes do multidicion√°rio. */

      Iterador inicio ()//v[i].inicio();
        {
         /* COMPLETE AQUI: Esta fun√ß√£o deve retornar um iterador apontando para
          *                o primeiro valor do multiconjunto, caso haja algum,
          *                ou ent√£o para o fim do multiconjunto, caso o
          *                multiconjunto esteja vazio. */
          Iterador it;
          it.p=prim;
          return it;
        }

      Iterador fim ()
        {
         /* COMPLETE AQUI: Esta fun√ß√£o dever√° retornar um iterador apontando
          *                para o "fim" do multiconjunto. */
          Iterador it;
          it.p=nullptr;
          return it;
        }

     };  // struct Multiconjunto

   // --------------------------------------------------------------------------

   /* COMPLETE AQUI: defina os "campos" (dados-membro) do multidicion√°rio,
    *                fazendo um Multiconjunto corresponder a cada chave.
    *
    * Caso deseje, voc√™ tamb√©m pode definir tipos ou fun√ß√µes auxiliares,
    * tanto aqui como em outros lugares deste arquivo. */

   // --------------------------------------------------------------------------

   // Fun√ß√µes-membro do multidicion√°rio:
   
   Multiconjunto *v;int n,tam; //vetor de multiconjuntos

   void deletar(noh *n){
   	for(noh *aux=n;n!=nullptr;aux=n){
   		n=n->prox;delete aux;
	}
   }
   
   bool redimensionar(int novo_tam){
   	
   	Multiconjunto *u=new(nothrow) Multiconjunto[novo_tam];
   	if(u==nullptr)return true;
   	for(int i=0;i<n;++i){
   		u[i]=v[i];
	}
	delete[] v;
	v=u;
   	tam=novo_tam;
   	return false;
   	
   }
   
   bool inicializar ()
     {
      /* COMPLETE AQUI: Esta fun√ß√£o deve inicializar o multidicion√°rio,
       *                deixando-o vazio.
       *
       * Ela deve retornar "true" em caso de falha de aloca√ß√£o de mem√≥ria (caso
       * alguma aloca√ß√£o seja necess√°ria), e deve retornar "false" em caso de
       * execu√ß√£o bem-sucedida. */
       v=new(nothrow) Multiconjunto[1];
       if(v==nullptr)return true;
       tam=1;n=0;
       return false;
     }

   Multiconjunto procurar (TC chv)
     {
      /* COMPLETE AQUI: Esta fun√ß√£o deve retornar o multiconjunto dos valores
       *                correspondentes √† chave "chv", caso ela ocorra no
       *                multidicion√°rio. Se a chave n√£o estiver presente,
       *                ent√£o deve ser retornado um multiconjunto vazio.
       *
       * IMPORTANTE: esta fun√ß√£o n√£o prev√™ a ocorr√™ncia de falha de aloca√ß√£o de
       *             mem√≥ria, partindo do pressuposto de que nenhuma aloca√ß√£o
       *             ser√° necess√°ria, afinal:
       *
       *   1. Se a chave estiver presente no multidicion√°rio, ent√£o o
       *      multiconjunto a ser retornado j√° existe.
       *
       *   2. Se a chave n√£o estiver presente, ent√£o deve ser poss√≠vel criar e
       *      retornar um multiconjunto vazio sem realizar aloca√ß√£o de mem√≥ria.
       */
       for(int i=0;i<n;++i){
       	if(v[i].chv_conj==chv)return v[i];
	   }
	   
	   Multiconjunto m;
	   return m;
     }

   bool inserir (TC chv, TV val)
     {
      /* COMPLETE AQUI: Esta fun√ß√£o deve inserir a chave "chv" e o valor "val"
       *                no multidicion√°rio.
       *
       * Mais especificamente, se a chave "chv" ainda n√£o ocorre no
       * multidicion√°rio, ent√£o ela e o valor "val" deve ser adicionados. Caso a
       * chave j√° ocorra no multidicion√°rio, ent√£o o valor "val" deve ser
       * adicionado aos valores correspondentes a essa chave.
       *
       * A fun√ß√£o deve retornar "true" em caso de falha de aloca√ß√£o de mem√≥ria,
       * e deve retornar "false" em caso de excu√ß√£o bem-sucedida. */
       
	   
	   noh *novo=new(nothrow) noh;
	   if(novo==nullptr)return true;
       novo->valor=val;
       // --------------------------------------------
	   for(int i=0;i<n;++i){
    	   if(v[i].chv_conj==chv){
		   	novo->prox=v[i].prim;v[i].prim=novo;return false;
		   }//A CHAVE EXISTE
	   }
	   //-----------------------------------------------
	   if(n==tam){bool erro=redimensionar(tam*2);if(erro)return erro;}
	   Multiconjunto m;m.chv_conj=chv;
	   v[n]=m;novo->prox=v[n].prim;v[n].prim=novo;
	   ++n;
	   
	   return false;
     }

   bool remover (TC chv)
     {
      /* COMPLETE AQUI: Esta fun√ß√£o deve remover a chave "chv" do
       *                multidicion√°rio (juntamente com os valores a ela
       *                correspondentes), caso ela ocorra. Se a chave n√£o
       *                estiver presente, o multidicion√°rio deve permanecer
       *                inalterado.
       *
       * A fun√ß√£o deve retornar "true" em caso de falha de aloca√ß√£o de mem√≥ria
       * (caso alguma aloca√ß√£o seja necess√°ria), e deve retornar "false" em caso
       * de execu√ß√£o bem-sucedida. */
       for(int i=0;i<n;++i){
       	if(v[i].chv_conj==chv){
		   deletar(v[i].prim);v[i]=v[n-1];--n;
		   if(tam>1 && n*4<=tam){bool erro=redimensionar(tam/2);return erro;}
		   return false;
		   } //chama funÁ„o para desalocar a lista
	   }
	   
	   return false;
     }

   void terminar ()
     {
      /* COMPLETE AQUI: Esta fun√ß√£o deve desalocar a mem√≥ria dinamicamente
       *                alocada para o multidicion√°rio (e consequentemente
       *                tamb√©m a mem√≥ria utilizada pelo Multiconjunto de cada
       *                chave). */
       for(int i=0;i<n;++i){
       	deletar(v[i].prim);
	   }
       
       delete v;
     }

  };  // struct Multidicionario ------------------------------------------------


// ----------------------------------------------------------------------------- */
