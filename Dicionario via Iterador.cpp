/* -----------------------------------------------------------------------------
 Universidade Federal do CearÃ¡ - Centro de CiÃªncias - Departamento de ComputaÃ§Ã£o
 Disciplina Estruturas de Dados - CK0109 - Turma 02 - Semestre Letivo 2020.2

 Molde de Resposta para o ExercÃ­cio ObrigatÃ³rio nÂº 11: DicionÃ¡rio via Lista Enc.

 Autor: Professor Pablo Mayckon Silva Farias, em 26/03/2021.

 TAREFA: leia o enunciado presente na plataforma de correÃ§Ã£o automÃ¡tica da
         disciplina, o qual Ã© complementado por informaÃ§Ãµes especÃ­ficas
         presentes neste arquivo, e em seguida complete a implementaÃ§Ã£o abaixo
         no lugares indicados com "COMPLETE AQUI".
----------------------------------------------------------------------------- */

// NÃ£o Ã© necessÃ¡rio incluir nenhum outro cabeÃ§alho alÃ©m de <new>.

#include <new>
#include<iostream>
using std::nothrow;

// -----------------------------------------------------------------------------

/* Este exercício consiste em implementar um dicionário utilizando lista
 * duplamente encadeada (não-circular e sem sentinela) como estrutura de dados,
 * e permitindo percurso via iterador.
 * As chaves terão tipo TC e os valores tipo TV.
 * Qualquer chave pode ocorrer no máximo uma vez no dicionário.
 *
 * A implementação abaixo já fornece a definição de noh e o ponteiro inicial da
 * lista encadeada. é obrigatório utilizá-los como estão (isto é, sem
 * alterar-lhes as definições), inclusive mantendo-os com acesso "público" (que
 * é o padrão para "struct"), pois o programa de testes percorrerá os nohs da
 * lista durante os testes (uma implementação mais realista poderia deixar a
 * implementação privada e declarar um tipo de testes como "friend", mas, por
 * simplicidade, todos os dados-membros do Dicionário serão públicos neste
 * exercício). Observe, porém, que a implementação do iterador ficará privada,
 * pois o programa de testes apenas usará os iteradores, sem investigar-lhes
 * a representação interna. */

template <typename TC, typename TV>
struct Dicionario
  {
   /* Conforme explicado acima, as definiÃ§Ãµes de "Noh" e de "prim" nÃ£o podem
    * ser alteradas, para viabilizar uma inspeÃ§Ã£o interna da lista. */

   struct Noh {  TC chave;  TV valor;  Noh *ant, *prox;  };

   Noh *prim;

   /* Lembre que esta serÃ¡ uma lista duplamente encadeada padrÃ£o, ou seja,
    * nÃ£o-circular e sem sentinela. Portanto, quando nÃ£o houver nÃ³ anterior
    * / prÃ³ximo ou um primeiro nÃ³, entÃ£o ant / prox / prim devem ser nulos,
    * respectivamente. */

   struct Iterador
     {
      friend Dicionario;  /* Esta declaraÃ§Ã£o apenas permite que, mais abaixo,
                           * as funÃ§Ãµes-membro do dicionÃ¡rio consigam acessar
                           * os membros privados da definiÃ§Ã£o do iterador,
                           * caso vocÃª precise disso. */

      private:

      /* COMPLETE AQUI: Defina aqui os campos necessÃ¡rios Ã  implementaÃ§Ã£o
       *                do iterador.
       *
       * ATENÃ‡ÃƒO: a definiÃ§Ã£o deve ser tal que um iterador que se refira a um
       *          elemento (chave e valor) do dicionÃ¡rio continue vÃ¡lido mesmo
       *          que aconteÃ§am inserÃ§Ãµes ou remoÃ§Ãµes de OUTROS elementos no
       *          dicionÃ¡rio. Observe que isso Ã© complicado de se fazer numa
       *          implementaÃ§Ã£o baseada em vetor, mas Ã© simples nesta
       *          implementaÃ§Ã£o com lista encadeada. */
		Noh *p;
      public:

      bool operator == (Iterador i)
        {
         /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve se retornar "true" se o
          *                iterador atual for igual ao iterador "i", ou "false"
          *                em caso contrÃ¡rio. */
          return p==i.p;
        }

      bool operator != (Iterador i)
        {
         /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve se retornar "true" se o
          *                iterador atual for diferente do iterador "i", ou
          *                "false" em caso contrÃ¡rio. */
          return p!=i.p;
        }

      /* No lugar do operador "*", esta implementaÃ§Ã£o de iterador possui as
       * funÃ§Ãµes "chave" e "valor" abaixo. */

      TC chave ()
        {
         /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve retornar a chave do
          *                elemento apontado pelo iterador. */
          return p->chave;
        }

      TV valor ()
        {
         /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve retornar o valor do
          *                elemento apontado pelo iterador. */
          return p->valor;
        }

      void operator ++ ()
        {
         /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve fazer o iterador passar
          *                ao prÃ³ximo elemento do dicionÃ¡rio, ou entÃ£o ao fim
          *                do dicionÃ¡rio, caso o iterador jÃ¡ esteja no Ãºltimo
          *                elemento. */
          p=p->prox;
        }

     }; // struct Iterador

   // --------------------------------------------------------------------------

   // Abaixo estÃ£o as funÃ§Ãµes-membro pÃºblicas do dicionÃ¡rio.

   void inicializar ()
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve inicializar o dicionÃ¡rio,
       *                deixando-o vazio. */
       prim=nullptr;
     }

   Iterador inicio ()
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve retornar um iterador
       *                apontando para o primeiro elemento do dicionÃ¡rio, caso
       *                haja elementos, ou entÃ£o para o "fim" do dicionÃ¡rio,
       *                caso ele esteja vazio. */
       Iterador it;
       it.p=prim; // interpretando fim como sendo o ponteiro nulo
       return it;
	 }

   Iterador fim ()
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve retornar um iterador
       *                apontando para o "fim" do dicionÃ¡rio. */
       Iterador it;
	   //while(it.p->dir!=nullptr)++it;
	   it.p=nullptr;
       return it;
     }

   Iterador procurar (TC chv)
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que serve para localizar uma chave
       *                no dicionÃ¡rio. Se a chave estiver presente, deve ser
       *                retornado um iterador apontando para ela e seu valor
       *                correspondente; em caso contrÃ¡rio, deve ser retornado
       *                um iterador apontando para o "fim" do dicionÃ¡rio. */
       Iterador it;
       
	   for(it=inicio();it!=fim();++it){
	   	if(it.chave()==chv)break;
	   }
       
       return it;
     }

   Iterador inserir (TC chv, TV val)
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deverÃ¡ permitir inserÃ§Ãµes no
       *                dicionÃ¡rio. Podem ocorrer 3 casos:
       *
       * Caso 1: A chave "chv" jÃ¡ estÃ¡ presente no dicionÃ¡rio: nesse caso, a
       *         funÃ§Ã£o deve manter o dicionÃ¡rio inalterado e retornar um
       *         iterador apontando para a chave "chv" e o valor jÃ¡
       *         correspondente a ela no dicionÃ¡rio (o qual pode ser igual a ou
       *         diferente de "val").
       *
       * Caso 2: A chave "chv" nÃ£o ocorre no dicionÃ¡rio, mas ocorre falha na
       *         alocaÃ§Ã£o de um novo nÃ³. Nesse caso, o dicionÃ¡rio deve ser
       *         mantido inalterado e a funÃ§Ã£o deve retornar um iterador
       *         apontando para o "fim" do dicionÃ¡rio.
       *
       * Caso 3: A chave "chv" nÃ£o ocorre no dicionÃ¡rio e nÃ£o acontece falha de
       *         alocaÃ§Ã£o de memÃ³ria. Nesse caso, a funÃ§Ã£o deve inserir "chv" e
       *         "val" no dicionÃ¡rio, e deve retornar um iterador apontando para
       *         a nova chave. */
       Iterador it=procurar(chv);
       if(it==fim()){
       	Noh *n=new(nothrow) Noh;
       	if(n==nullptr)return fim();
       	
       	n->chave=chv;n->valor=val;
		n->prox=prim;n->ant=nullptr;
		if(prim!=nullptr)prim->ant=n;
		prim=n;
       	
		it.p=n;
	   }
	   
	   return it;
     }

   void remover (Iterador i)
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que recebe um iterador apontando
       *                para algum elemento (chave e valor) do dicionÃ¡rio, e que
       *                deve entÃ£o removÃª-lo.
       *
       * AtenÃ§Ã£o: observe que esta versÃ£o da funÃ§Ã£o, ao invÃ©s de receber uma
       *          chave (que entÃ£o precisaria ser procurada), jÃ¡ recebe um
       *          iterador relativo Ã  chave que precisa ser removida, bastando
       *          entÃ£o realizar a remoÃ§Ã£o propriamente dita. NÃ£o Ã© necessÃ¡rio
       *          testar a validade do iterador: a funÃ§Ã£o jÃ¡ deve pressupor que
       *          o iterador Ã© vÃ¡lido e portanto se refere a algum elemento
       *          (chave e valor) do dicionÃ¡rio. */
	   
	   if(i.p->prox != nullptr)i.p->prox->ant=i.p->ant;
		
       if(i.p->ant != nullptr)i.p->ant->prox=i.p->prox;
	   
	   if(prim==i.p)prim=i.p->prox;

	   delete i.p;
     }

   void terminar ()
     {
      /* COMPLETE AQUI: Defina esta funÃ§Ã£o, que deve desalocar os nÃ³s utilizados
       *                para armazenar os elementos do dicionÃ¡rio. */
       for(Iterador it=inicio();it!=fim();){
       	++it;delete prim;prim=it.p;
	   }
     }

  };  // struct Dicionario

// -----------------------------------------------------------------------------
/*
int main(){
	Dicionario<int,int> d;
	d.inserir(1,1);
	d.inserir(2,2);
	d.inserir(3,3);
	d.inserir(4,4);
	d.inserir(5,5);
	
	Dicionario<int,int>::Iterador a=d.procurar(1);
	d.remover(a);
	for(Dicionario<int,int>::Iterador it=d.inicio();it!=d.fim();++it)std::cout<<it.chave()<<","<<it.valor()<<"\n";
}*/
